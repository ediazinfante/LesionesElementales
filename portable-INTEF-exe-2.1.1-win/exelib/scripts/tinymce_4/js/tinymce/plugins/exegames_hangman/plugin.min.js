/**
 * plugin.min.js
 *
 * Released under Attribution-ShareAlike 4.0 International License.
 * Author: Ignacio Gros (http://gros.es/) for http://exelearning.net/
 *
 * License: http://creativecommons.org/licenses/by-sa/4.0/
 */

/**
 * Hangman Game for eXeLearning
 * To be used with the files in this folder: /scripts/exe_games/
 */

tinymce.PluginManager.add('exegames_hangman', function(editor, url) {
	
	var exeHangManGame = {
		
		wordsNo : 15, // Max. words
		
		getWordsForm : function(){
			
			var items = [];
			
			for (var i=0;i<exeHangManGame.wordsNo;i++) {
				
				var item = {
						type: 'container',
						layout: 'flex',
						direction: 'row',
						align: 'center',
						minHeight: 40,
						spacing: 15,
						items: [
							{type: 'label', text: (i+1)+".", style: 'font-weight:bold;text-align:right', minWidth: 20},
							{type: 'label', forId: 'hangman-word-'+i, text: _('Word')+":"},
							{name: 'hangman-word-'+i, id: 'hangman-word-'+i, type: 'textbox', ariaLabel: _('Word to guess'), size: 20 },
							{type: 'label', forId: 'hangman-hint-'+i, text: _('Definition')+":"},
							{name: 'hangman-hint-'+i, id: 'hangman-hint-'+i, type: 'textbox', ariaLabel: _('Hint or definition'), size: 40 }
						]
					}
					
				items.push(item);
				
			}
			
			return {
				type: 'container',
				layout: 'flex',
				direction: 'column',
				maxHeight: 250,
				id: 'hangman-words-list',
				items: items						
			}
			
		},
		
		// Open the dialog
		open : function(){
			
			var body = [
				
				// General tab
				{
					title: _('General'),
					type: 'form',
					pack: 'start',
					items: [
						{
							name: 'hangman-letters',
							id: 'hangman-letters',
							type: 'textbox',
							label: _("Alphabet to Select From")+":",
							size: 40,
							value: _("abcdefghijklmnÃ±opqrstuvwxyz"),
							onkeyup: function(){
								this.value(this.value().replace(/ /g,''));
							}
						},
						{
							type: 'container',
							layout: 'flex',
							direction: 'row',
							align: 'center',
							spacing: 15,
							minHeight: 40,
							items: [
								{
									name: 'include-capital-letters', 
									id: 'include-capital-letters',
									type: 'checkbox', 
									checked: true, 
									text: _('Automatically include capital letters')								
								},
								{
									name: 'case-sensitive', 
									id: 'case-sensitive',
									type: 'checkbox', 
									checked: false, 
									text: _('Case sensitive')
								}							
							]						
						},
						{
							type: 'label',
							text: _('Word to guess')+" / "+_('Hint or definition')+":",
							style: 'font-weight:bold'
						},
						exeHangManGame.getWordsForm()				
					]
				},
				
				// Accessibility tab
				{
					title: _('Accessibility'),
					type: 'form',
					pack: 'start',
					items: [
						{
							type: 'label',
							text: _("These games require JavaScript."),
							style: 'font-weight:bold'
						},					
						{
							type: 'label',
							forId: 'no-js-msg',
							text: _("This is the message that the users with no JavaScript will see:")
						},
						{
							name: 'no-js-msg',
							id: 'no-js-msg',
							type: 'textbox',
							size: 40,
							value: _("Please enable JavaScript to play this game.")
						},
						{
							type: 'label',
							text: _("You can change it at any time.")
						}					
					]
				},
				
				// Instructions tab
				{
					title: _('Instructions'),
					type: 'form',
					pack: 'start',
					items: [
						{
							type: 'container',
							html: '\
								<ol style="margin:0 0 1.5em 2em">\
									<li style="margin-bottom:.5em">'+_("Write the list of letters and/or numbers to choose from.")+'</li>\
									<li style="margin-bottom:.5em">'+_("You may include capital letters or they can be automatically included.")+'</li>\
									<li style="margin-bottom:.5em">'+_("Choose if you want the game to be case sensitive.")+'</li>\
									<li style="margin-bottom:.5em">'+_("Add at least one word to guess (question or definition + word).")+'</li>\
									<li style="margin-bottom:.5em">'+_("You may delete the game from the editor itself.")+'</li>\
								</ol>\
								<p>'+_("Don't forget to check the Accessibility tab.")+'</p>\
							'
						}					
					]
				}
				
			];			
			
			win = editor.windowManager.open({
				title: _("Hangman Game"),
				body: body,
				bodyType: 'tabpanel',
				onsubmit: exeHangManGame.insert
			});
			
			// We might need a vertical scroll bar
			if (exeHangManGame.wordsNo>6) jQuery('#hangman-words-list-body').css('overflow-y','auto');

			exeHangManGame.checkEditorMode();	
			
		},
		
		checkEditorMode : function(){
			
			// Set the default values
			exeHangManGame.mode = "create"; // Create or edit
			
			var elm = editor.selection.getNode();
			var e = jQuery(elm);
			var isElement = false;
			var parents = e.parents(".exe-hangman");
			
			if (parents.length>0) {
				exeHangManGame.mode = "edit";
			} else {
				// IE gets the whole block instead of a part of it
				if (e.hasClass("exe-game") && e.hasClass("exe-hangman")) {
					exeHangManGame.mode = "edit";
					isElement = true;
					parents = e;
				}				
			}

			// Edition
			if (exeHangManGame.mode=='edit') {
				if (parents.length!=1 && !isElement) {
					editor.windowManager.alert(_('Error recovering data'));
					return false;
				}
				exeHangManGame.currentGame = parents;
				exeHangManGame.loadPreviousValues(parents);
			}
			
		},
		
		loadPreviousValues : function(e){
			
			// Get the letters to choose from
			var letters = jQuery(".exe-hangman-letters",e).html();
			if (letters == "") {
				editor.windowManager.alert(_('Error recovering data'));
				return false;
			}
			win.find("#hangman-letters")[0].value(letters);
			
			var c = e.attr("class");
			
			// Automatically include capital letters 
			var checked = false;
			if (c.indexOf("add-capital-letters")!=-1) checked = true;
			win.find("#include-capital-letters")[0].checked(checked);
			
			// Case sensitive
			checked = false;
			if (c.indexOf("case-sensitive")!=-1) checked = true;
			win.find("#case-sensitive")[0].checked(checked);
			
			// Get the hints and words
			var hints = jQuery("dt",e);
			var words = jQuery("dd",e);
			
			if (hints.length!=words.length) {
				editor.windowManager.alert(_('Error recovering data'));
				return false;
			}
			
			for (var z=0;z<hints.length;z++) {
				win.find("#hangman-hint-"+z)[0].value(hints[z].innerHTML);
				win.find("#hangman-word-"+z)[0].value(exeHangManGame.decode64(words[z].innerHTML));
			}
			
			// Accessibility
			var msg = jQuery(".exe-game-warning",e).html();
			if (msg!="") win.find("#no-js-msg")[0].value(msg);
			
		},
		
		insert : function(){
			
			// Check the JavaScript disabled message 
			var noJS = win.find("#no-js-msg")[0].value();
			if (noJS=="") {
				editor.windowManager.alert(_('Provide a warning to users who have JavaScript disabled (Accessibility).'));
				return false;
			}
			
			var words = [];
				
			// Check if it has letters to choose from
			var letters = win.find("#hangman-letters")[0].value();
			if (letters.length==0) {
				editor.windowManager.alert(_('Please write the Alphabet to Select From'));
				return false;
			}
			
			for (var i=0;i<exeHangManGame.wordsNo;i++) {
				var dt = win.find("#hangman-hint-"+i)[0].value();
				var dd = win.find("#hangman-word-"+i)[0].value();
				// Hint with no word
				if (dt!="") {
					if (dd=="") {
						editor.windowManager.alert(_('A word to guess is missing'));
						return false;
					}
				// Word with no hint
				} else if (dd!="") {
					if (dt=="") {
						editor.windowManager.alert(_('A hint or definition is missing'));
						return false;
					}
				}
				// OK
				if (dt!="" && dd!="") {
					words.push([dt,dd]);
				}
			}
			
			// No words!
			if (words.length==0) {
				editor.windowManager.alert(_('Please add at least one word to guess'));
				return false;
			}
			
			// OK (at least one word with hint or definition)
			
			// Compose the HTML
			var html = "";
			var css = "exe-game exe-hangman";
			if (win.find('#include-capital-letters')[0].checked()==true) css += " add-capital-letters";
			if (win.find('#case-sensitive')[0].checked()==true) css += " case-sensitive";
			html += '<div class="exe-game-content">\n';
				html += '<p class="exe-hangman-letters">'+letters+'</p>\n';
				html += '<dl>\n';
				for (var x=0;x<words.length;x++) {
					html += '<dt>'+words[x][0]+'</dt>\n';
					html += '<dd>'+exeHangManGame.encode64(words[x][1])+'</dd>\n';
				}
				html += '</dl>\n';
			html += '</div>\n';
			html += '<p class="exe-game-warning">'+noJS+'</p>';
			
			// Create or update the game
			if (exeHangManGame.mode=="create") {
				html = '<div class="'+css+'">\n'+html+'</div>\n<br />';
				editor.execCommand('mceInsertContent', false, html);
			} else {
				var e = exeHangManGame.currentGame;
				e.attr("class",css).html(html);
			}

			// Add undo + Close the editor
			editor.undoManager.add();
			editor.windowManager.close();			
				
		}, // Insert
		
		// Base64 encoder/decoder
		// https://jsfiddle.net/gabrieleromanato/qaght/
		_keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
		encode64 : function(input) {
			var output = "";
			var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
			var i = 0;
			input = this._utf8_encode(input);
			while (i < input.length) {
				chr1 = input.charCodeAt(i++);
				chr2 = input.charCodeAt(i++);
				chr3 = input.charCodeAt(i++);
				enc1 = chr1 >> 2;
				enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
				enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
				enc4 = chr3 & 63;
				if (isNaN(chr2)) {
					enc3 = enc4 = 64;
				} else if (isNaN(chr3)) {
					enc4 = 64;
				}
				output = output + this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) + this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
			}
			return output;
		},
		
		decode64: function(input) {
			var output = "";
			var chr1, chr2, chr3;
			var enc1, enc2, enc3, enc4;
			var i = 0;
			input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
			while (i < input.length) {
				enc1 = this._keyStr.indexOf(input.charAt(i++));
				enc2 = this._keyStr.indexOf(input.charAt(i++));
				enc3 = this._keyStr.indexOf(input.charAt(i++));
				enc4 = this._keyStr.indexOf(input.charAt(i++));
				chr1 = (enc1 << 2) | (enc2 >> 4);
				chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
				chr3 = ((enc3 & 3) << 6) | enc4;
				output = output + String.fromCharCode(chr1);
				if (enc3 != 64) {
					output = output + String.fromCharCode(chr2);
				}
				if (enc4 != 64) {
					output = output + String.fromCharCode(chr3);
				}
			}
			output = this._utf8_decode(output);
			return output;
		},
		
		_utf8_encode: function(string) {
			string = string.replace(/\r\n/g, "\n");
			var utftext = "";
			for (var n = 0; n < string.length; n++) {
				var c = string.charCodeAt(n);
				if (c < 128) {
					utftext += String.fromCharCode(c);
				}
				else if ((c > 127) && (c < 2048)) {
					utftext += String.fromCharCode((c >> 6) | 192);
					utftext += String.fromCharCode((c & 63) | 128);
				}
				else {
					utftext += String.fromCharCode((c >> 12) | 224);
					utftext += String.fromCharCode(((c >> 6) & 63) | 128);
					utftext += String.fromCharCode((c & 63) | 128);
				}
			}
			return utftext;
		},
		
		_utf8_decode: function(utftext) {
			var string = "";
			var i = 0;
			var c = c1 = c2 = 0;
			while (i < utftext.length) {
				c = utftext.charCodeAt(i);
				if (c < 128) {
					string += String.fromCharCode(c);
					i++;
				} else if ((c > 191) && (c < 224)) {
					c2 = utftext.charCodeAt(i + 1);
					string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
					i += 2;
				} else {
					c2 = utftext.charCodeAt(i + 1);
					c3 = utftext.charCodeAt(i + 2);
					string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
					i += 3;
				}
			}
			return string;
		}		
		
	}
	
	editor.addButton('exegames_hangman', {
		tooltip: _("Hangman Game"),
		image: url + '/img/exegames_hangman.png',
		onclick: exeHangManGame.open
	});
	
	
	editor.addMenuItem('exegames_hangman', {
		text: _("Hangman Game"),
		image: url + '/img/exegames_hangman.png',
		context: 'insert',
		onclick: exeHangManGame.open
	});
	
	editor.on('init', function(e) {
		
		editor.dom.loadCSS(url + "/css/content.css");
		
		// jQuery is required
		if (typeof(jQuery)!='function') {
			alert(_('Hangman Game')+": "+_('jQuery is required'));
			return false;			
		}
		
		// CSS - Game name in the right language
		var d = editor.getDoc();
		var s = '<style type="text/css">';
			s += '.exe-game.exe-hangman:before{content:"'+_('Hangman Game')+'"}';
		s += '</style>';
		jQuery("HEAD",d).append(s);
		
	});
	
});