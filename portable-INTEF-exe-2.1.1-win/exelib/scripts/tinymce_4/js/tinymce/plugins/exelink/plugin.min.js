/**
 * plugin.js
 *
 * Released under LGPL License.
 * Copyright (c) 1999-2015 Ephox Corp. All rights reserved
 *
 * License: http://www.tinymce.com/license
 * Contributing: http://www.tinymce.com/contributing
 */
 
/**
 * "Include file information" options by José Ramón Jiménez Reyes (original idea and previous code) and Ignacio Gros (http://gros.es/)
 * The "Anchors and nodes" list was part of eXeLearning.org's version. Adapted by Ignacio Gros (http://gros.es/)
 
 * Released under Attribution-ShareAlike 4.0 International License.
 * License: http://creativecommons.org/licenses/by-sa/4.0/ 
 
 * The rest is just a copy of TinyMCE's plugins\link\plugin.js 
 */  

/*global tinymce:true */

tinymce.PluginManager.add('exelink', function(editor, url) {
	function createLinkList(callback) {
		return function() {
			var linkList = editor.settings.link_list;

			if (typeof linkList == "string") {
				tinymce.util.XHR.send({
					url: linkList,
					success: function(text) {
						callback(tinymce.util.JSON.parse(text));
					}
				});
			} else if (typeof linkList == "function") {
				linkList(callback);
			} else {
				callback(linkList);
			}
		};
	}

	function buildListItems(inputList, itemCallback, startItems) {
		function appendItems(values, output) {
			output = output || [];

			tinymce.each(values, function(item) {
				var menuItem = {text: item.text || item.title};

				if (item.menu) {
					menuItem.menu = appendItems(item.menu);
				} else {
					menuItem.value = item.value;

					if (itemCallback) {
						itemCallback(menuItem);
					}
				}

				output.push(menuItem);
			});

			return output;
		}

		return appendItems(inputList, startItems || []);
	}

	function showDialog(linkList) {
		var data = {}, selection = editor.selection, dom = editor.dom, selectedElm, anchorElm, initialText;
		var win, onlyText, textListCtrl, linkListCtrl, relListCtrl, targetListCtrl, classListCtrl, linkTitleCtrl, value;

		function linkListChangeHandler(e) {
			var textCtrl = win.find('#text');

			if (!textCtrl.value() || (e.lastControl && textCtrl.value() == e.lastControl.text())) {
				textCtrl.value(e.control.text());
			}

			win.find('#href').value(e.control.value());
		}

		function updateText() {
			if (!initialText && data.text.length === 0 && onlyText) {
				this.parent().parent().find('#text')[0].value(this.value());
			}
		}

		function urlChange(e) {
			var meta = e.meta || {};

			if (linkListCtrl) {
				linkListCtrl.value(editor.convertURL(this.value(), 'href'));
			}

			tinymce.each(e.meta, function(value, key) {
				win.find('#' + key).value(value);
			});

			if (!meta.text) {
				updateText.call(this);
			}
		}
		
		function getAnchorList() {
			
			var list = [
				{text: '---', value: ''}
			];
			
			var ed = editor, nodes = ed.dom.select('a'), name, i, len, html = "";

			for (i=0, len=nodes.length; i<len; i++) {
				if ((name = ed.dom.getAttrib(nodes[i], "name")) != "")
					list.push( {text: name, value: '#'+name} );

				if ((name = nodes[i].id) != "" && !nodes[i].href)
					list.push( {text: name, value: '#'+name} );
			}
			
			if (typeof tinymce_anchors=="object") {
				for (i=0;i<tinymce_anchors.length;i++){
					var n = tinymce_anchors[i].replace("exe-node:",_("Node")+":");
					var checkN = n.split("#");
					if (checkN[1]=="auto_top") n = n.replace("#auto_top","");
					n = decodeURIComponent(n);
					var newOption = {text: n, value: tinymce_anchors[i]};
					if (list.indexOf(newOption)==-1) list.push( newOption );
				}
			}

			return list;
		}

		function isOnlyTextSelected(anchorElm) {
			var html = selection.getContent();

			// Partial html and not a fully selected anchor element
			if (/</.test(html) && (!/^<a [^>]+>[^<]+<\/a>$/.test(html) || html.indexOf('href=') == -1)) {
				return false;
			}

			if (anchorElm) {
				var nodes = anchorElm.childNodes, i;

				if (nodes.length === 0) {
					return false;
				}

				for (i = nodes.length - 1; i >= 0; i--) {
					if (nodes[i].nodeType != 3) {
						return false;
					}
				}
			}

			return true;
		}

		selectedElm = selection.getNode();
		anchorElm = dom.getParent(selectedElm, 'a[href]');
		onlyText = isOnlyTextSelected();

		data.text = initialText = anchorElm ? (anchorElm.innerText || anchorElm.textContent) : selection.getContent({format: 'text'});
		data.href = anchorElm ? dom.getAttrib(anchorElm, 'href') : '';

		if (anchorElm) {
			data.target = dom.getAttrib(anchorElm, 'target');
		} else if (editor.settings.default_link_target) {
			data.target = editor.settings.default_link_target;
		}

		if ((value = dom.getAttrib(anchorElm, 'rel'))) {
			data.rel = value;
		}

		if ((value = dom.getAttrib(anchorElm, 'class'))) {
			data['class'] = value;
		}

		if ((value = dom.getAttrib(anchorElm, 'title'))) {
			data.title = value;
		}

		if (onlyText) {
			textListCtrl = {
				name: 'text',
				type: 'textbox',
				size: 40,
				label: 'Text to display',
				onchange: function() {
					data.text = this.value();
				}
			};
		}

		if (linkList) {
			linkListCtrl = {
				type: 'listbox',
				label: 'Link list',
				values: buildListItems(
					linkList,
					function(item) {
						item.value = editor.convertURL(item.value || item.url, 'href');
					},
					[{text: 'None', value: ''}]
				),
				onselect: linkListChangeHandler,
				value: editor.convertURL(data.href, 'href'),
				onPostRender: function() {
					/*eslint consistent-this:0*/
					linkListCtrl = this;
				}
			};
		}

		if (editor.settings.target_list !== false) {
			if (!editor.settings.target_list) {
				editor.settings.target_list = [
					{text: 'None', value: ''},
					{text: 'New window', value: '_blank'}
				];
			}

			targetListCtrl = {
				name: 'target',
				type: 'listbox',
				label: 'Target',
				values: buildListItems(editor.settings.target_list)
			};
		}

		if (editor.settings.rel_list) {
			relListCtrl = {
				name: 'rel',
				type: 'listbox',
				label: 'Rel',
				values: buildListItems(editor.settings.rel_list)
			};
		}

		if (editor.settings.link_class_list) {
			classListCtrl = {
				name: 'class',
				type: 'listbox',
				label: 'Class',
				values: buildListItems(
					editor.settings.link_class_list,
					function(item) {
						if (item.value) {
							item.textStyle = function() {
								return editor.formatter.getCssText({inline: 'a', classes: [item.value]});
							};
						}
					}
				)
			};
		}

		if (editor.settings.link_title !== false) {
			linkTitleCtrl = {
				name: 'title',
				type: 'textbox',
				label: 'Title',
				value: data.title
			};
		}

		win = editor.windowManager.open({
			title: 'Insert link',
			data: data,
			body: [
				{
					name: 'href',
					type: 'filepicker',
					filetype: 'file',
					size: 40,
					autofocus: true,
					label: 'Url',
					onchange: urlChange,
					onkeyup: updateText
				},
				{
					type: 'listbox',
					minWidth: 150,
					name: 'anchorsandnodes',
					label: _("Anchors and nodes"),
					'values': getAnchorList(),
					onselect: function(){
						win.find("#href")[0].value(this.value());
					}
				},				
				textListCtrl,
				linkTitleCtrl,
				linkListCtrl,
				relListCtrl,
				targetListCtrl,
				classListCtrl,
				{
					name: 'includefileinfo', 
					type: 'checkbox',
					checked: false, 
					text: 'Include file information',
					onchange: function(){
						if ($exeTinyMCE.activeDialog.tmp!='noAjax') {
							toggleFileInfoBlock(this.state.get("checked"));
						}
						$exeTinyMCE.activeDialog.tmp = '';
					}
				},
				{
					name: 'fileInfoSize',
					id: 'fileInfoSize',
					type: 'textbox',
					label: 'File size',
					onkeyup: function(e){
						
						var v = this.value();
						var last = v[v.length-1];
						var previous = v.slice(0,v.length-1);
						var deleteIt = true;
						if (last=="." && previous.indexOf(".")==-1 && previous.indexOf(",")==-1) deleteIt = false;
						else if (last=="," && previous.indexOf(",")==-1 && previous.indexOf(".")==-1) deleteIt = false;
						else if (!isNaN(last)) deleteIt = false;
						
						if (deleteIt) v = previous;
						this.value(v.replace(/ /g,''));
						
					}
				},	
				{
					name: 'fileInfoSizeInKB',
					type: 'textbox',
					visible: false
				},					
				{
					type: 'listbox',
					name: 'fileInfoUnit',
					id: 'fileInfoUnit',
					label: 'Unit',
					'values': [
						{value: '', text: 'Bytes'},
						{value: 'KB', text: 'KiloBytes'},
						{value: 'MB', text: 'MegaBytes'}
					],
					onselect : function(){
						recalcFileSize(this.value());
					}
				},
				{
					name: 'fileInfoExtension',
					id: 'fileInfoExtension',
					type: 'textbox',
					label: 'File extension',
					value: data.title
				}				
			],
			onSubmit: function(e) {
				/*eslint dot-notation: 0*/
				var href;
                
                data = tinymce.extend(data, e.data);
				href = data.href;
                
				// File info
				var extraHTMLtoInsert = '';
				if (win.find("#includefileinfo")[0].checked()==true) {
					var fileInfoSize = win.find("#fileInfoSize")[0].value();
					var fileInfoUnit = win.find("#fileInfoUnit")[0].value();
					var fileInfoExtension = win.find("#fileInfoExtension")[0].value();
					if (fileInfoSize!='') {
						if (fileInfoExtension=='') {
							editor.windowManager.alert('Specify the file extension');
							return false;
						}
						var unitAbbr = fileInfoUnit;
						var unitTitle = 'Bytes';
						if (fileInfoUnit == '')	{
							unitAbbr = 'B';
						} else if (fileInfoUnit == 'KB')	{
							unitTitle = 'KiloBytes';
						} else if (fileInfoUnit == 'MB')	{
							unitTitle = 'MegaBytes';
						} 	
						extraHTMLtoInsert = '<span class="exe-link-data file-size"> ('+fileInfoExtension+' - '+fileInfoSize+' <abbr title="'+unitTitle+'" lang="en">'+unitAbbr+'</abbr>)</span>'
						var fileInfoTitle = '['+fileInfoExtension+' - '+fileInfoSize+' '+unitAbbr+']'
						if (data.title!='') fileInfoTitle = ' ' + fileInfoTitle;
						data.title += fileInfoTitle;
					}
				}
                
                // Delay confirm since onSubmit will move focus
				function delayedConfirm(message, callback) {
					var rng = editor.selection.getRng();

					tinymce.util.Delay.setEditorTimeout(editor, function() {
						editor.windowManager.confirm(message, function(state) {
							editor.selection.setRng(rng);
							callback(state);
						});
					});
				}

				function insertLink() {
					var linkAttrs = {
						href: href,
						target: data.target ? data.target : null,
						rel: data.rel ? data.rel : null,
						"class": data["class"] ? data["class"] : null,
						title: data.title ? data.title : null
					};

					if (anchorElm) {
						editor.focus();

						if (onlyText && data.text != initialText) {
							if ("innerText" in anchorElm) {
								anchorElm.innerText = data.text;
							} else {
								anchorElm.textContent = data.text;
							}
						}
						
						var elmSize = anchorElm.nextSibling;
						// File info
						if (elmSize != null && typeof(elmSize.innerHTML) != "undefined" && elmSize.innerHTML != "" && elmSize.nodeName == 'SPAN' && elmSize.className == 'exe-link-data file-size') {
							jQuery(elmSize).before(extraHTMLtoInsert).remove();
						} else {
							jQuery(anchorElm).after(extraHTMLtoInsert);
						}		
						// / File info						

						dom.setAttribs(anchorElm, linkAttrs);												
						selection.select(anchorElm);
						editor.undoManager.add();
					} else {
						if (onlyText) {
							var htmlToInsert = dom.createHTML('a', linkAttrs, dom.encode(data.text));
							editor.insertContent(htmlToInsert+extraHTMLtoInsert);							
						} else {
							jQuery(selectedElm).after(extraHTMLtoInsert);
							editor.execCommand('mceInsertLink', false, linkAttrs);
						}
					}
				}

				if (!href) {
					editor.execCommand('unlink');
					return;
				}

				// Is email and not //user@domain.com
				if (href.indexOf('@') > 0 && href.indexOf('//') == -1 && href.indexOf('mailto:') == -1) {
					delayedConfirm(
						'The URL you entered seems to be an email address. Do you want to add the required mailto: prefix?',
						function(state) {
							if (state) {
								href = 'mailto:' + href;
							}

							insertLink();
						}
					);

					return;
				}

				// Is not protocol prefixed
				if ((editor.settings.link_assume_external_targets && !/^\w+:/i.test(href)) ||
					(!editor.settings.link_assume_external_targets && /^\s*www[\.|\d\.]/i.test(href))) {
					delayedConfirm(
						'The URL you entered seems to be an external link. Do you want to add the required http:// prefix?',
						function(state) {
							if (state) {
								href = 'http://' + href;
							}

							insertLink();
						}
					);

					return;
				}

				insertLink();
			}
		});
        
        $exeTinyMCE.activeDialog.win = win;
		
		getPreviousValues(win);
        
	}
	
	function recalcFileSize(unit) {
		
		var fileInfoSizeInKB_field = $exeTinyMCE.activeDialog.win.find("#fileInfoSizeInKB");
		var sizeInKB = fileInfoSizeInKB_field.value();
		var sizeField = $exeTinyMCE.activeDialog.win.find("#fileInfoSize");
		
		if (sizeField.value()=="") {
			editor.windowManager.alert('"File size" is empty');	
			$exeTinyMCE.activeDialog.win.find("#fileInfoUnit").value('');
			return false;						
		}
		
		// The AJAX request went wrong, so sizeInKB is empty
		// In that case you might want to type the information
		if (sizeInKB=="") {
			sizeInKB==sizeField.value().replace(',','.');
			fileInfoSizeInKB_field.value(sizeInKB);
			$exeTinyMCE.activeDialog.win.find("#fileInfoUnit").value(unit);
			return false;
		}
		
		var size = '';
		if (unit == '' ) size = sizeInKB;
		else if (unit == 'KB') size = (sizeInKB/1000).toFixed(2);
		else if (unit == 'MB') size = (sizeInKB/1000000).toFixed(2);
		
		if (document.getElementsByTagName("HTML")[0].lang=="es") size = size.replace(".",",");
		
		sizeField.value(size);
		
	}
	
	function toggleFileInfoBlock(toggle,executeAjax) {
		var fields = jQuery("#fileInfoSize,#fileInfoUnit,#fileInfoExtension");
		var labels = jQuery("#fileInfoSize-l,#fileInfoUnit-l,#fileInfoExtension-l");
		var url = $exeTinyMCE.activeDialog.win.find("#href").value();
		if (toggle) {
			if (url=='') {
				editor.windowManager.alert('The Url field is empty');
				$exeTinyMCE.activeDialog.win.find("#includefileinfo").checked(false);
				toggleFileInfoBlock(false);			
			} else {
				fields.prop("disabled",false).css("opacity",1);
				labels.css("opacity",1);
				if (executeAjax==false) return false;
				var xhr = jQuery.ajax({
					type: "GET",
					url: url,
					success: function(res){
						var size = res.length;
						if (size!=0) {
							$exeTinyMCE.activeDialog.win.find("#fileInfoSize").value(size);
							$exeTinyMCE.activeDialog.win.find("#fileInfoSizeInKB").value(size);
							$exeTinyMCE.activeDialog.win.find("#fileInfoUnit").value('');
							var ext = url.split("/");
							ext = ext[ext.length-1].split(".");
							if (ext.length>1) ext = ext[1].split('?')[0];
							else ext = '';
							if (ext=='') {
								// tinymce.activeEditor.windowManager.alert("Could not get the file extension");	
							}
							$exeTinyMCE.activeDialog.win.find("#fileInfoExtension").value(ext);
						} else {
							// tinymce.activeEditor.windowManager.alert("Could not get the file data");
							$exeTinyMCE.activeDialog.win.find("#fileInfoSize").value('');
							$exeTinyMCE.activeDialog.win.find("#fileInfoUnit").value('');
							$exeTinyMCE.activeDialog.win.find("#fileInfoExtension").value('');
						}
					},
					error: function(){
						// tinymce.activeEditor.windowManager.alert("Could not get the file data");
						$exeTinyMCE.activeDialog.win.find("#fileInfoSize").value('');
						$exeTinyMCE.activeDialog.win.find("#fileInfoUnit").value('');
						$exeTinyMCE.activeDialog.win.find("#fileInfoExtension").value('');						
					}
				});
				
			}
		} else {
			fields.prop("disabled","disabled").css("opacity","0.2");
			labels.css("opacity","0.2");
		}		
	}
	
	function getPreviousValues(win) {
		
		// Hide the File Info Block
		toggleFileInfoBlock(false,false); // false = No AJAX request
		
		// Get the node	or anchor	
		var urlField = win.find("#href")[0];
		var href = urlField.value();
		if (href.indexOf("exe-node:")==0 || href.indexOf("#")==0) {
			win.find("#anchorsandnodes")[0].value(href);
		}
		
		var elm = editor.selection.getNode();
		
		if (!elm) return false;
		
		var isLink = false;
		
		var elmSize = "";
		
		if (elm.nodeName=="A") {
			elmSize = elm.nextSibling;
		} else if (elm.parentNode && elm.parentNode.nodeName=="A") {
			elmSize = elm.parentNode.nextSibling;
		}
		
		// File info
		if (elmSize != "" && elmSize != null && typeof(elmSize.innerHTML) != "undefined" && elmSize.innerHTML != "" && elmSize.nodeName == 'SPAN' && elmSize.className == 'exe-link-data file-size') {
			
			var titleField = win.find("#title")[0];
			var title = titleField.value();
			
			var t = title.replace(/\[.*\]/,"");
			if (t[t.length-1] == " ") t = t.substring(0, t.length - 1);
			titleField.value(t);
			
			var size = elmSize.innerHTML.replace(/<abbr(.)*">/,"").replace("</abbr>","");
			size = size.replace(" (","");
			var parts = size.split(" - ");
			if (parts.length==2) {
				var type = parts[0];
				var p2 = parts[1].split(" ");
				if (p2.length==2) {
					
					// File info checked
					
					$exeTinyMCE.activeDialog.tmp = 'noAjax';
					win.find("#includefileinfo")[0].checked(true);
					
					var sizeField = win.find("#fileInfoSize")[0];
					
					// Get the size
					size = p2[0];
					sizeField.value(size);
					
					size = size.replace(',','.');
					
					// Get the size in KB
					var bytes = "";
					var unit = p2[1].replace(")","");
					if (unit == "B") bytes = size;
					else if (unit == "KB") bytes = (size * 1000);
					else if (unit == "MB") bytes = (size * 1000 * 1000);
					
					win.find("#fileInfoSizeInKB")[0].value(bytes);
					
					// Set the unit. KB or MB. Otherwise: Bytes.
					var unit = p2[1].replace(")","");
					if (unit=='KB' || unit=='MB') {
						win.find("#fileInfoUnit")[0].value(unit);
					} else {
						sizeField.value(bytes);
					}
					
					// Extension
					if (title.indexOf("[") != -1 && title.indexOf(" - ") != -1)	{
						win.find("#fileInfoExtension")[0].value(title.split("[")[1].split("-")[0].trim());
					}
					
					// Show the File Info Block
					toggleFileInfoBlock(true, false); // false = No AJAX request
					
				}
			}
		}
		// / File info
		
	}

	editor.addButton('exelink', {
		icon: 'link',
		tooltip: 'Insert/edit link',
		shortcut: 'Meta+K',
		onclick: createLinkList(showDialog),
		stateSelector: 'a[href]'
	});

	editor.addButton('unlink', {
		icon: 'unlink',
		tooltip: 'Remove link',
		cmd: 'unlink',
		stateSelector: 'a[href]'
	});

	editor.addShortcut('Meta+K', '', createLinkList(showDialog));
	editor.addCommand('mceLink', createLinkList(showDialog));

	this.showDialog = showDialog;

	editor.addMenuItem('exelink', {
		icon: 'link',
		text: 'Insert/edit link',
		shortcut: 'Meta+K',
		onclick: createLinkList(showDialog),
		stateSelector: 'a[href]',
		context: 'insert',
		prependToContext: true
	});
	
	editor.on('init', function(e) {
		
		editor.dom.loadCSS(url + "/css/content.css");
		
		// We need global access to the dialog
		// We create $exeTinyMCE.activeDialog if it's not present
		if (typeof($exeTinyMCE)!='undefined') {
			if (typeof($exeTinyMCE.activeDialog)=='undefined') {
				$exeTinyMCE.activeDialog = {
				   win : '',
				   tmp : ''
				}
			}
		}
		
	});
	
});
