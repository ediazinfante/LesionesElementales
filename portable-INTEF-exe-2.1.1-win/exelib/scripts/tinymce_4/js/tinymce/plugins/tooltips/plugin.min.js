/**
 * plugin.min.js
 *
 * Released under Attribution-ShareAlike 4.0 International License.
 * Author: Ignacio Gros (http://gros.es/) for http://exelearning.net/
 *
 * License: http://creativecommons.org/licenses/by-sa/4.0/
 */

/**
 * Create/edit simple, inline HTML and AJAX tooltips
 * To be used with http://qtip2.com/, licensed MIT, GPL (files in exe/webui/scripts/exe_tooltips)
 */
tinymce.PluginManager.add('tooltips', function(editor, url) {
	
	TooltipDialog = {
		
		className : "exe-tooltip", // Main className (jQuery selector)
		
		otherClassNames : [
			// Type
			'plain-tt',
			'definition-tt',
			'ajax-tt',
			'glossary-tt',
			// Title
			'titled-tt',
			// Close button
			'with-button',
			// Colors
			'light-tt',
			'dark-tt',
			'red-tt',
			'blue-tt',
			'green-tt',
			// CSS3
			'rounded-tt',
			'shadowed-tt'
		],		
		
		globals : {
			instructionsBlockTopPosition : 0
		},
		
		// Load the previous values (if needed)
		getValues : function(){
			
			// Default values
			
			var block1 = document.getElementById("type1-options");
			var block2 = document.getElementById("type2-options");
			var block3 = document.getElementById("type3-options");
						
			TooltipDialog.globals.instructionsBlockTopPosition = block1.style.top;
			block2.style.display = "none";
			block3.style.display = "none";
			
			// Set type 3 instructions:
			var instructions = '\
				<p style="margin-top:5px"><strong style="font-weight:bold">'+_("Instructions:")+'</strong></p>\
				<ul>\
					<li style="margin:10px 0">1. '+_("Create a Page with a Free Text iDevice.")+'</li>\
					<li style="margin:10px 0">2. '+ _("Define the Link: Select that page.")+'</li>\
					<li style="margin:10px 0">3. '+_('The tooltip will show the content of the Free Text iDevice.')+'</li>\
				</ul>\
			';
			jQuery("#type3-instructions").html(instructions);
			
			// Set Appearance preview
			TooltipDialog.setPreview();
			
			// Get previous values
			
			var elm;
			var inst = editor;
			elm = inst.selection.getNode();
			elm = inst.dom.getParent(elm, "A");
			if (elm != null) {
				
				var type = 1;
				var color = "" // Yellow
				var rounded = false;
				var shadow = false;
				
				var ref = inst.dom.getAttrib(elm, 'href');
				var tit = inst.dom.getAttrib(elm, 'title');
				var cls = inst.dom.getAttrib(elm, 'class');
				var trg = inst.dom.getAttrib(elm, 'target');
				
				// Get the type
				if (cls.indexOf(" definition-tt")!=-1) type = 2;
				else if (cls.indexOf(" ajax-tt")!=-1) type = 3;
				else if (cls.indexOf(" glossary-tt")!=-1) type = 4;
				
				// Get the color
				if (cls.indexOf(" light-tt")!=-1) color = "light";
				else if (cls.indexOf(" dark-tt")!=-1) color = "dark";
				else if (cls.indexOf(" red-tt")!=-1) color = "red";
				else if (cls.indexOf(" blue-tt")!=-1) color = "blue";
				else if (cls.indexOf(" green-tt")!=-1) color = "green";
				
				// Get other options
				if (cls.indexOf(" rounded-tt")!=-1) rounded = true;
				if (cls.indexOf(" shadowed-tt")!=-1) shadow = true;
				
				// Set the default type
				win.find('#type')[0].value("type"+type);
				
				// Set the Link (common)
				var href = win.find('#href')[0];
				href.value(ref);
				if (ref.indexOf("exe-node:")==0) {
					win.find('#node')[0].value(ref);
				}
				
				// Set the target (common)
				win.find('#target')[0].value(trg);
				
				// Set the color (common)
				win.find('#color')[0].value(color);
				
				// Set other options
				if (rounded) win.find('#rounded')[0].checked(true);
				if (shadow) win.find('#shadow')[0].checked(true);
				TooltipDialog.setPreview();
				
				// Set the close behaviour (common)
				if (cls.indexOf(" with-button")!=-1) {
					win.find('#close_behaviour')[0].value(" with-button");
				}
				
				// Set the tooltip title and the link title
				if (cls.indexOf(" titled-tt")!=-1) {
					tit = tit.split(" | ");
					if (tit.length==2) {
						var title = tit[0];
						var txt = tit[1];
						win.find('#tooltipTitle')[0].value(title);
						win.find('#linkTitle')[0].value(txt);
					} else {
						win.find('#linkTitle')[0].value(tit);
					}
				} else {
					win.find('#linkTitle')[0].value(tit);
				}
				
				// Set any extra classes
				var arr = cls.split(" ");
				var w;
				var extra = ""
				for (w=0;w<arr.length;w++) {
					if (arr[w]!="" && arr[w]!=TooltipDialog.className) {
						if (TooltipDialog.otherClassNames.indexOf(arr[w])==-1) {
							extra += " "+arr[w];
						}
					}
				}
				var extraField = win.find('#extraClassNames')[0];
				extraField.value(extraField.value()+extra);
				
				// Set the tooltip content
				if (type==2) {
					var id = inst.dom.getAttrib(elm, 'id');
					id = id.replace("link","t");
					var e = inst.dom.select("#"+id)[0];
					if (e) {
						if (ref.indexOf("#")==0) href.value("#");
						win.find('#longtext')[0].value(e.innerHTML);
					}
				}
				
				// Show the right block
				TooltipDialog.showTypeOptions("type"+type);
				
			} else {
				
				// New tooltip... Remember the user's preferences:
				var c = TooltipDialog.cookie.get("tinymceTooltipOptionsPlugin")
				if (c) {
					var c = c.split("|");
					if (c.length==3) { // In case there are different versions of the plugin
						var clr = c[0]; // Color
						var rnd = c[1]; // Rounded
						var shd = c[2]; // Shadow
						if (clr!="" && rnd!="" && shd!="") {
							win.find('#color')[0].value(clr);
							if (rnd=="true") win.find('#rounded')[0].checked(true);
							if (shd=="true") win.find('#shadow')[0].checked(true);
							TooltipDialog.setPreview();
						}
					}
				}
				
			}
			
		},
		
		setPreview : function(){
			
			// Change the image (no shadow and no border-radius, shadow and no border radius, etc.)
			var rounded = win.find('#rounded')[0].checked();
			var shadow = win.find('#shadow')[0].checked();
			var img = 'appearance1';
			if (rounded && shadow) img = 'appearance4';
			else if (rounded) img = 'appearance2';
			else if (shadow) img = 'appearance3';
			jQuery("#preview").html('<img src="'+editor.settings.path_to_folder+'plugins/tooltips/img/'+img+'.png" width="340" height="55" alt="" />');
			
		},
		
		validate : function(type) {
			
			// Required fields
			
			var t = parseInt(type.replace("type",""));
			var ref = win.find('#href')[0].value();
			var txt = win.find('#linkTitle')[0].value();
			var lng = win.find('#longtext')[0].value();
			
			if (ref=="") {
				if (t==3) return _("Please select a Page");
				else return _("The Link is required");
			}
			if (t==1 && txt=="") return _("The Link title is required");
			if (t==2 && lng=="") return _("Please write the Definition");
			
			return "";
			
		},
		
		hasHTML : function(str){
			
			// Check if it has HTML tags (if not, we'll wrap the content in a P tag)
			
			var a = document.createElement('div');
			a.innerHTML = str;
			for (var c = a.childNodes, i = c.length; i--; ) {
				if (c[i].nodeType == 1) return true; 
			}
			return false;
			
		},

		generateID : (function() {
			
			// Random ID
			function s4() {
				return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
			}
			return function() {
				return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
			};
			
		})(),
		
		cookie : {

			set : function(cname,cvalue,exdays) {
				var d = new Date();
				d.setTime(d.getTime() + (exdays*24*60*60*1000));
				var expires = "expires=" + d.toGMTString();
				document.cookie = cname+"="+cvalue+"; "+expires;
			},

			get : function(cname) {
				var name = cname + "=";
				var ca = document.cookie.split(';');
				for(var i=0; i<ca.length; i++) {
					var c = ca[i];
					while (c.charAt(0)==' ') {
						c = c.substring(1);
					}
					if (c.indexOf(name) == 0) {
						return c.substring(name.length, c.length);
					}
				}
				return "";
			}
			
		},		
		
		setAttribs : function(elm,type) {
			
			var cls = TooltipDialog.className+" ";
			
			var t = parseInt(type.replace("type",""));
			
			var ref = win.find('#href')[0].value().replace(/ /g, '%20');
			
			var txt = win.find('#linkTitle')[0].value();
			var tit = win.find('#tooltipTitle')[0].value();
			if (t==1) {
				cls += "plain-tt";
			} else if (t==2) {
				cls += "definition-tt";
				// Set the ID
				var inst = editor;
				var elm = inst.selection.getNode();
				elm = inst.dom.getParent(elm, "A");			
				var id = inst.dom.getAttrib(elm, 'id');
				if (id=="") {
					id = "link"+this.generateID();
					this.setAttrib(elm, 'id', id);
					this.currentLinkId = id;
					if (ref=="#") ref = "#"+id.replace("link","t");
				}
			} else if (t==3) {
				cls += "ajax-tt";
			} else {
				cls += "glossary-tt";
			}
			if (tit!="") {
				cls += " titled-tt";
				txt = tit+" | "+txt;
			}
			
			// Only Type 1 allows target="_blank"
			var trg = "";
			if (t==1) trg = win.find('#target')[0].value();
			
			// With or without close button
			var btn = win.find('#close_behaviour')[0].value();
			cls += btn;
			
			// Color (if not Yellow)
			var clr = win.find('#color')[0].value();
			if (clr!="") {
				clr += "-tt";
				cls += " "+clr;
			}
			
			// Rounded or not
			var isRounded = "false";
			var rounded = win.find('#rounded')[0].checked();
			if (rounded) {
				isRounded = "true";
				cls += " rounded-tt";
			}
			
			// Shadow
			var hasShadow = "false";
			var shadow = win.find('#shadow')[0].checked();
			if (shadow) {
				hasShadow = "true";
				cls += " shadowed-tt";
			}
			
			// Set the cookie to remember the user's preferences (color, rounded, shadow)
			var cValue = clr.replace("-tt","")+"|"+isRounded+"|"+hasShadow;
			TooltipDialog.cookie.set("tinymceTooltipOptionsPlugin", cValue, 30);
			
			// Other classes
			cls += win.find('#extraClassNames')[0].value();

			this.setAttrib(elm, 'href', ref);
			this.setAttrib(elm, 'title', txt);
			this.setAttrib(elm, 'target', trg);
			// this.setAttrib(elm, 'id');
			this.setAttrib(elm, 'class', cls);
			TooltipDialog.currentClassNames = cls;
			
		},
		
		setAttrib : function(elm, attrib, value) {
			
			var formObj = document.forms[0];
			var valueElm = formObj.elements[attrib.toLowerCase()];
			var dom = editor.dom;

			if (typeof(value) == "undefined" || value == null) {
				value = "";
				if (valueElm) value = valueElm.value;
			}

			// Clean up the style
			if (attrib == 'style') value = dom.serializeStyle(dom.parseStyle(value), 'a');

			dom.setAttrib(elm, attrib, value);
			
		},		
		
		// Create or update the content
		insert : function(content){
			
			var type = win.find('#type')[0].value();
			var inst = editor;
			
			var errors = TooltipDialog.validate(type);
			if (errors!="") {
				inst.windowManager.alert(errors);
				return false;
			}
		
			var elm, elementArray, i;
			elm = inst.selection.getNode();
			elm = inst.dom.getParent(elm, "A");
			
			// Remove element if there is no href
			if (!win.find('#href')[0].value()) {
				i = inst.selection.getBookmark();
				inst.dom.remove(elm, 1);
				inst.selection.moveToBookmark(i);
				inst.execCommand("mceEndUndoLevel");
				inst.close();
				return;
			}
			
			// Create new anchor elements
			if (elm == null) {
				inst.getDoc().execCommand("unlink", false, null);
				inst.execCommand("mceInsertLink", false, "#mce_temp_url#", {skip_undo : 1});
				elementArray = tinymce.grep(inst.dom.select("a"), function(n) {return inst.dom.getAttrib(n, 'href') == '#mce_temp_url#';});
				for (i=0; i<elementArray.length; i++) TooltipDialog.setAttribs(elm = elementArray[i],type);
			} else {
				TooltipDialog.setAttribs(elm,type);
			}
			
			// Don't move caret if selection was image
			if (elm.childNodes.length != 1 || elm.firstChild.nodeName != 'IMG') {
				inst.focus();
				inst.selection.select(elm);
				inst.selection.collapse(0);
				// inst.storeSelection();
			}
			
			// Definition
			if (type=="type2") {
				// Get the tooltip content
				var lng = win.find('#longtext')[0].value();
				if (!TooltipDialog.hasHTML(lng)) lng = "<p>"+lng+"</p>";
				
				// Get the link ID
				var id = "";
				if (elm == null) {
					if (typeof(TooltipDialog.currentLinkId)!='undefined') id = TooltipDialog.currentLinkId;
				} else {
					id = inst.dom.getAttrib(elm, 'id');
					if (id=="") id = "link"+TooltipDialog.generateID();
				}
				id = id.replace("link","t");
				if (id!="") {
					var e = inst.dom.select("#"+id);
					// Create or update the content
					if (e.length==0) {
						inst.dom.add(inst.getBody(), 'div', { id : id, class : TooltipDialog.className+'-text' }, lng);
					} else {
						inst.dom.setHTML(e, lng);
					}
					// Get the text of the link and show it in the definition
					if (typeof(jQuery)=='function') {
						var d = inst.getDoc();
						var dt = jQuery("a[href$='"+id+"']",d);
						if (dt.length==1) {
							var content = dt.text();
							if (content!="") {
								var s = '<style type="text/css">#'+id+':before{content:"'+_('Tooltip')+' - '+_("Definition")+' - '+content+'"}</style>';
								jQuery("HEAD",d).append(s);
							}
						}
					}
				}
				// Get the link title
				var linkTitle = "";
				var term = win.find('#tooltipTitle')[0].value();
				var tit = win.find('#linkTitle')[0].value();
				if (term!="" || tit!="") {
					linkTitle = term + " | " + tit;
					if (term=="") linkTitle = tit;
				}				
				inst.dom.setAttribs(elm, {
					// Make sure that you link to the anchor
					'href': '#'+id,
					// Update the id too
					'id': id.replace("t","link"),
					// And the className (or it won't work inside accordions and other blocks with effects)
					// class="exe-tooltip definition-tt..."
					'class': TooltipDialog.currentClassNames,
					// Set the link title
					'title': linkTitle
				});
			}
			
			editor.execCommand("mceEndUndoLevel");
			editor.windowManager.close();	
			
		},
		
		showTypeOptions : function(val){
			
			// Update the text below the SELECT
			var no = (parseFloat(val.replace("type",""))-1);
			var descriptions = [
				_("Plain text. You can add a title."),
				_("Write the term and its definition. You may use HTML and edit it in the editor."),
				_("Show the content of the first Free Text iDevice in the specified page.")
			];
			document.getElementById("type-desc").innerHTML = descriptions[no];
			
			// Show the block options and hide the others
			document.getElementById("type1-options").style.display = "none";
			document.getElementById("type2-options").style.display = "none";
			document.getElementById("type3-options").style.display = "none";
			var currentBlock = document.getElementById(val+"-options");
			currentBlock.style.display = "block";
			// "Reflow"
			currentBlock.style.top = TooltipDialog.globals.instructionsBlockTopPosition;
			
			// Update #tooltipTitle's label text:
			var label = _("Tooltip title");
			if (val == "type2") label = _("Term");
			document.getElementById("tooltipTitle-l").innerHTML = label;

			// URL and Pages
			var refField = jQuery("#href");
			var refLabel = jQuery("#href-l");
			var nodeField = jQuery("#node");
			var nodeLabel = jQuery("#node-l");	
			if (val=="type2") {
				if (refField.val()=="") refField.val("#");
				refField.prop("disabled","disabled").css("opacity",0.2);
				refLabel.css("opacity",0.2);
				nodeField.prop("disabled","disabled").css("opacity",0.2);
				nodeLabel.css("opacity",0.2);
			} else {
				if (refField.value=="#") refField.value = "";
				refField.prop("disabled",false).css("opacity",1);
				refLabel.css("opacity",1);	
				nodeField.prop("disabled",false).css("opacity",1);
				nodeLabel.css("opacity",1);					
				refField.show();
				refLabel.show();
				nodeField.show();
				nodeLabel.show();				
			}
			
		},
		
		getNodesList : function(){
			
			// Get the package nodes
			var i;
			var arrayName = "tinymce_anchors";
			var w = window;
			var html = "";
			var options = [];
			options.push({text: _("---"), value: ''})
			if (w) {
				if (typeof w[arrayName]=="object") {
					var myArray = w[arrayName];
					for (i=0;i<myArray.length;i++){
						var n = myArray[i].replace("exe-node:","");
						var checkN = n.split("#");
						if (checkN[1]=="auto_top") n = n.replace("#auto_top","");
						n = decodeURIComponent(n);
						var newOption = '<option value="' + myArray[i] + '">' + n + '</option>\n';
						if (html.indexOf(newOption)==-1) {
							html += newOption;
							options.push({text: n, value: myArray[i]})
						}
					}
				}
			}
			return options;
			
		},
		
		openToolTipDialog : function(){
			
			var se = editor.selection;
			var a = editor.dom.getParent(se.getNode(), 'A');
			if (se.isCollapsed() && !a) {
				editor.windowManager.alert(_("No selection and not in link"));
				return false;
			}		
			
			win = editor.windowManager.open({
				title: _('Tooltip'),
				bodyType: 'tabpanel',
				body: [
					
					{
						title: _('General'),
						type: 'form',
						items: [
							{
								type: 'textbox',
								name: 'extraClassNames',
								id: 'extraClassNames',
								visible: false
							},
							{
								type: 'listbox',
								minWidth: 150,
								name: 'type',
								id: 'type',
								label: _("Choose a type:"),
								'values': [
									{text: _("Text"), value: 'type1'},
									{text: _("Definition"), value: 'type2'},
									{text: _("Page"), value: 'type3'}
								],
								onselect : function(){
									TooltipDialog.showTypeOptions(this.value()); // type1, type2 or type3
								}
							},
							{
								type: 'label',
								id: 'type-desc',
								visible: false,
								style: 'line-height:30px;font-weight:bold',
								text: _("Plain text. You can add a title.")
							},
							{
								name: 'href',
								id: 'href',
								type: 'textbox',
								label: _("Link URL"),
								onchange: function(){
									if (this.value().indexOf("exe-node:")!=-0) {
										win.find('#node')[0].value("");
									}
								}
							},
							{
								name: 'node',
								id: 'node',
								type: 'listbox',
								label: _("Pages"),
								'values': TooltipDialog.getNodesList(),
								onselect : function(){
									win.find('#href')[0].value(this.value());
								}
							},
							{
								name: 'linkTitle',
								id: 'linkTitle',
								type: 'textbox',
								label: _("Link title"),
							},
							{
								name: 'tooltipTitle',
								id: 'tooltipTitle',
								type: 'textbox',
								label: _("Tooltip title"),
							},
							// Type 1
							{
								type: 'container',
								id: 'type1-options',
								layout: 'flex',
								direction: 'row',
								align: 'center',
								spacing: 15,
								items: [
									{
										type: 'label',
										style: 'line-height:30px;font-weight:bold',
										text: _("The tooltip will show the Link title.")
									}
								]						
							},
							// Type 2
							{
								type: 'container',
								id: 'type2-options',
								layout: 'flex',
								direction: 'column',
								spacing: 15,
								items: [
									{
										type: 'label',
										style: 'line-height:30px;font-weight:bold',
										text: _("The tooltip will show the term and its definition.")
									},
									{
										type: 'label',
										visible: false,
										text: _("Definition:"),
										forId: 'longtext'
									},
									{
										id: 'longtext',
										type: 'textbox',
										name: 'longtext',
										minHeight: 60,
										placeholder: _("Definition"),
										minWidth: 500,
										multiline: true
									}
								]						
							},
							// Type 3
							{
								type: 'container',
								id: 'type3-options',
								layout: 'flex',
								direction: 'row',
								align: 'center',
								spacing: 15,
								items: [
									{
										type: 'label',
										id: 'type3-instructions',
										style: 'line-height:30px',
										minHeight: 100,
										minWidth: 500,
										text: _("Instructions:")
									}
								]						
							}							
						]
					},

					{
						title: _('Behaviour'),
						type: 'form',
						pack: 'start',
						items: [
							{
								type: 'label',
								text: _("Close behaviour:"),
								forId: 'close_behaviour'
							},						
							{
								type: 'listbox',
								minWidth: 150,
								name: 'close_behaviour',
								id: 'close_behaviour',
								'values': [
									{text: _("Automatically close the tooltip when moving the mouse out of the link"), value: ''},
									{text: _("Close button: It will close the tooltip when clicked"), value: ' with-button'}
								]
							},
							{
								type: 'label',
								text: _("Link behaviour:"),
								forId: 'target'
							},						
							{
								type: 'listbox',
								minWidth: 150,
								name: 'target',
								id: 'target',
								'values': [
									{text: _("Open in the same window"), value: ''},
									{text: _("Open in a new window"), value: '_blank'}
								]
							}							
						]
					},
					
					{
						title: _('Appearance'),
						type: 'form',
						pack: 'start',
						items: [
							{
								type: 'label',
								id: 'preview',
								text: "",
								minHeight: 55,
								minWidth: 340
							},						
							{
								type: 'listbox',
								minWidth: 150,
								name: 'color',
								id: 'color',
								label: _("Change the styling:"),
								'values': [
									{text: _("Yellow"), value: ''},
									{text: _("Light"), value: 'light'},
									{text: _("Dark"), value: 'dark'},
									{text: _("Red"), value: 'red'},
									{text: _("Blue"), value: 'blue'},
									{text: _("Green"), value: 'green'}
								]
							},
							{
								type: 'container',
								layout: 'flex',
								direction: 'row',
								align: 'center',
								spacing: 15,
								items: [
									{
										name: 'rounded', 
										id: 'rounded',
										type: 'checkbox', 
										text: _('Rounded'),
										onchange: function(){
											TooltipDialog.setPreview();
										}								
									},
									{
										name: 'shadow', 
										id: 'shadow',
										type: 'checkbox', 
										text: _('Shadow'),
										onchange: function(){
											TooltipDialog.setPreview();
										}								
									}
								]						
							}							
						]
					}
					
				],
				onSubmit: TooltipDialog.insert
			});
			
			TooltipDialog.getValues();
			
		}, // openToolTipDialog
		
		activateButton : function(node) {
			
			var nodeName = node.nodeName;
			var activate = false;
			var parentA = editor.dom.getParent(node, 'A');
			
			if (nodeName=="A" && node.className.indexOf(TooltipDialog.className)!=-1) activate = true;
			else if (parentA && parentA.className.indexOf(TooltipDialog.className)!=-1) activate = true;
			
			return activate;

		}
		
	} // TooltipDialog
	
	editor.addButton('tooltips', {
		icon: 'bubble',
		tooltip: _('Tooltip'),
		onclick: TooltipDialog.openToolTipDialog,
		onPostRender: function() {
			var ctrl = this;
			editor.on('NodeChange', function(e) {
				ctrl.active(TooltipDialog.activateButton(e.element));
			});
		}		
	});
	
	editor.addMenuItem('tooltips', {
		text: _('Tooltip'),
		icon: 'bubble',
		onclick: TooltipDialog.openToolTipDialog,
		context: 'insert'
	});
	
	editor.on('init', function(e) {
		
		editor.dom.loadCSS(url + "/css/content.css");
		
		// jQuery is required
		if (typeof(jQuery)!='function') {
			alert(_('Tooltip')+": "+_('jQuery is required'));
			return false;			
		}
		
		// i18n in CSS (type names in the right language)
		var d = editor.getDoc();
		var s = '<style type="text/css">';
			// Default title
			s += '.exe-tooltip-text:before{content:"'+_('Tooltip')+' - '+_("Definition")+'"}';
			// Get the text of each tooltip to replace the default title
			jQuery(".exe-tooltip-text",d).each(function(){
				var dt = jQuery("a[href$='"+this.id+"']",d);
				if (dt.length==0) {
					// "The term could not be found"
					s += '#'+this.id+':before{content:"'+_('Tooltip')+' - '+_("The term could not be found")+'"}';
				} else if (dt.length==1) {
					var content = dt.text();
					if (content!="") s += '#'+this.id+':before{content:"'+_('Tooltip')+' - '+_("Definition")+' - '+content+'"}';
				}
			});				
			s += '</style>';
		jQuery("HEAD",d).append(s);	
		
	});
	
});