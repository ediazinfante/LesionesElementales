/**
 * plugin.min.js
 *
 * Released under Attribution-ShareAlike 4.0 International License.
 * Author: Ignacio Gros (http://gros.es/) for http://exelearning.net/
 *
 * License: http://creativecommons.org/licenses/by-sa/4.0/
 */

/**
 * Insert/Edit Attributes Plugin
 * If you prefer a simpler solution check this plugin by Gagaro: https://github.com/Gagaro/tinymce-editattributes 
 * The "New attribute" idea was taken from Gagaro's plugin
 * Ideas by José Ramón Jiménez Reyes:
 *     Add styles from the current style's content.css file
 *     Add attributes just to the selection wrapping it in a SPAN tag
 */
tinymce.PluginManager.add('easyattributes', function(editor) {
	
	function getAttr(attr, nodeAttrs) {
		if (nodeAttrs[attr]) return nodeAttrs[attr].value;
		else return '';
	}
	
	// Get classes from exe_style (the current Style's content.css file)
	function getAvailableClasses() {
		
		var sheets = document.styleSheets;
		var sheet, rule, rules, item, name, tmp;
		var classes = [];
		var names = [];
		
		for (var i=0, iLen=sheets.length; i<iLen; i++) {
			sheet = sheets[i];
			if (sheet.href && sheet.href.indexOf(exe_style)!=-1) {
				rules = sheet.rules || sheet.cssRules;

				for (var j=0, jLen=rules.length; j<jLen; j++) {
					rule = rules[j];
					tmp = rule.cssText.match(/\.\w+/g);
					if (tmp) {
						classes.push.apply(classes, tmp);
					}
				}
			}
		}
		classes.sort();
		
		// Add some classes (exe-hidden, etc.)
		var rightClasses = [
			{text: '-- Not Set --', value: ''},
			{text: 'exe-hidden', value: 'exe-hidden'},
			{text: 'exe-hidden-accessible', value: 'exe-hidden-accessible'}
		];
		
		for (var z=0;z<classes.length;z++) {
			name = classes[z].replace('.','');
			if (isNaN(classes[z].charAt(1)) && names.indexOf(name)==-1 && name.indexOf("iDevice")==-1 && name.indexOf("Idevice")==-1 && name!="js") {
				rightClasses.push({text: name, value: name});
				names.push(name);
			}
		}
		
		return rightClasses;				
		
	}
	
	// Add the selected class at the end of the "CSS class" field (just if it's not there)
	function addClass(classToAdd) {
		
		if (classToAdd=="") return;
		var f = win.find("#class")[0];
		var originalClass = f.value();
		var classes = originalClass.split(" ");
		var isInClasses = false;
		for (var i=0;i<classes.length;i++) {
			if (classes[i]==classToAdd) isInClasses = true;
		}
		if (!isInClasses) classes.push(classToAdd);
		if (classes.length==1) {
			f.value(classToAdd);
		} else {
			f.value(originalClass+" "+classToAdd)
		}
		if (originalClass.length>40) {
			// Warn the user so there's no doubt that the class was added (it's not visible)
			editor.windowManager.alert(_('Class added to the "CSS class" field.'));
		}
		
	}
	
	// TinyMCE 3.5.11 events (see attributes.htm)	
	var defaultEvents = [
		'onfocus',
		'onblur',
		'onclick',
		'ondblclick',
		'onmousedown',
		// 'onmouseup',
		'onmouseover',
		'onmousemove',
		'onmouseout',
		'onkeypress',
		// 'onkeydown',
		'onkeyup'
	];	
	
	// Get the Events tab content
	function getEvents(nodeAttrs) {
		
		var events = [];
		
		for (var e=0; e<defaultEvents.length; e++) {
			events.push(
				{type: 'textbox', name: defaultEvents[e], size: 40, label: defaultEvents[e], value: getAttr(defaultEvents[e], nodeAttrs) }
			);			
		}

		return events;
		
	}
	
	// Get the Attributes tab content
	function getAttributes(nodeAttrs){
		
		var defaultAttributes = [
			'title',
			'id',
			'class',
			'style',
			'dir',
			'lang',
			'tabindex',
			'accesskey'
		];			
		
		var attrs = [
			{ type: 'textbox', name: 'title', size: 40, label: _('Title'), value: getAttr('title', nodeAttrs) },
			{ type: 'textbox', name: 'id', size: 40, label: _('ID'), value: getAttr('id', nodeAttrs) },
			{ type: 'textbox', name: 'class', size: 40, label: _('CSS class'), value: getAttr('class', nodeAttrs) },
			{
				type: 'listbox',
				name: 'extraclasses',
				label: _("Add CSS class"),
				'values': getAvailableClasses(),
				onselect: function(){
					addClass(this.value());
				}
			},			
			{ type: 'textbox', name: 'style', size: 40, label: _('Style'), value: getAttr('style', nodeAttrs) },
			{
				type: 'listbox',
				name: 'dir',
				label: _("Text Direction"),
				'values': [
					{text: _("Default"), value: ''},
					{text: _("Left to Right"), value: 'ltr'},
					{text: _("Right to Left"), value: 'rlt'}
				]
			},					
			{ type: 'textbox', name: 'lang', size: 40, label: _('Language'), value: getAttr('lang', nodeAttrs) },
			{ type: 'textbox', name: 'tabindex', size: 40, label: _('TabIndex'), value: getAttr('tabindex', nodeAttrs) },
			{ type: 'textbox', name: 'accesskey', size: 40, label: _('AccessKey'), value: getAttr('accesskey', nodeAttrs) }		
		];
		
		for (var i=0 ; i< nodeAttrs.length; i++) {
			var attribute = nodeAttrs[i];
			if (attribute.name.indexOf("data-mce")!=0) {
				if (defaultAttributes.indexOf(attribute.name)==-1 && defaultEvents.indexOf(attribute.name)==-1) {
					attrs.push(
						{type: 'textbox', name: attribute.name, size: 40, label: attribute.name, value: attribute.value}
					);
				}
			}
		}
		
		attrs.push(
			// New attribute
			{
				type: 'container',
				label: _('New attribute'),
				layout: 'flex',
				direction: 'row',
				align: 'center',
				spacing: 5,
				items: [
					{name: 'mce_new_name', type: 'textbox', ariaLabel: _('Name'), placeholder: _('Name').toLowerCase()},
					{name: 'mce_new_value', type: 'textbox', ariaLabel: _('Value'), placeholder: _('Value').toLowerCase()},
				]
			}
		);		
		
		return attrs;	
		
	}	

	// Set the attributes and events
	function setAttributes(e,data) {
		// Set the Attributes
		for (key in data) {
			editor.dom.setAttribs(e, data);
		}
		// Set the Events
		for (var i=0; i<defaultEvents.length; i++) {
			editor.dom.setAttrib(e, defaultEvents[i], win.find("#"+defaultEvents[i])[0].value());
		}	
	}
	
	function showDialog() {
		
		var selectedNode = editor.selection.getNode();
		var nodeAttrs = selectedNode.attributes;
		var body = [
			{
				title: _('Attributes'),
				type: 'form',
				pack: 'start',
				items: getAttributes(nodeAttrs)
			},	
			{
				title: _('Events'),
				type: 'form',
				pack: 'start',
				items: getEvents(nodeAttrs)
			}			
		];
		
		win = editor.windowManager.open({
			title: _("Insert/Edit Attributes"),
			body: body,
			bodyType: 'tabpanel',
			onsubmit: function(e) {
				editor.undoManager.transact(function() {
					
					var new_name = e.data['mce_new_name'];
					var new_value = e.data['mce_new_value'];

					delete e.data['mce_new_name'];
					delete e.data['mce_new_value'];

					if (new_name.length > 0) {
						e.data[new_name] = new_value;
					}
					
					// Remove this attribute. Its value is already part of the "CSS class" field (see onselect)
					e.data.extraclasses = null;
					
					// Add the attributes just to the selection, not to the whole paragraph. Create a SPAN tag if needed.
					var c = editor.selection.getContent();
					if (c!="" && selectedNode.nodeName!="SPAN") {
						
						var newElm = editor.dom.create('span', {}, c);
						setAttributes(newElm,e.data);
						editor.selection.setNode(newElm);
						editor.windowManager.close();
						return false;
						
					}		
					
					// Update the attributes and events
					setAttributes(selectedNode, e.data);
					
				});
			}
		});
	}

	editor.addButton('easyattributes', {
		icon: 'options',
		tooltip: _("Insert/Edit Attributes"),
		onclick: showDialog
	});

	editor.addMenuItem('easyattributes', {
		text: _("Insert/Edit Attributes"),
		onclick: showDialog,
		context: 'edit'
	});
	
});