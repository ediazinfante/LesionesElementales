/**
 * plugin.min.js
 *
 * Released under Attribution-ShareAlike 4.0 International License.
 * Author: Ignacio Gros (http://gros.es/) for http://exelearning.net/
 *
 * License: http://creativecommons.org/licenses/by-sa/4.0/
 * Based in OtherXtras by José Ramón Jiménez Reyes for http://exelearning.net/
 */

/**
 * TinyMCE plugin to create blockquotes with cite and (optional) make them look nice
 * Don't forget to add some styles to theme/site so the code has the same appearance everywhere (see eXe's base.css file)
 */
tinymce.PluginManager.add('blockquoteandcite', function(editor, url) {
	
	var BlockQuoteAndCite = {
		
		isQuote : false,
		
		open : function(){			
			// Open the window and load the previous values
			win = editor.windowManager.open({
				title: _('Quote With Authorship'),
				width: 600,
				height: 350,
				body: [
					{
						type: 'checkbox', 
						id: 'styled',
						name: 'styled',
						checked: true, 
						text: _('Include Styles (improves presentation)')
					},
					{
						type: 'label',
						text: _('Quote'),
						forId: 'blockquote'
					},
					{
						type: 'textbox',
						id: 'blockquote',
						name: 'blockquote',
						minHeight: 80,
						maxWidth: 558,
						multiline: true
					},
					{
						type: 'textbox',
						id: 'blockquoteLang',
						name: 'blockquoteLang',
						maxWidth: 426,
						label: _('Quote Language')
					},
					{
						type: 'textbox',
						id: 'author',
						name: 'author',
						maxWidth: 426,
						label: _('Authorship')
					},
					{
						type: 'textbox',
						id: 'authorLang',
						name: 'authorLang',
						maxWidth: 426,
						label: _('Authorship Language')
					},
					{
						type: 'label',
						text: _('Specify the languages only if they are different from the rest of the content.')
					},
					{
						type: 'label',
						text: _('Use a two-letter ISO 639-1 code like "en", "es", "fr" or "de".')
					}					
				],
				onsubmit: function(editor) {
					// Insert content when the window form is submitted
					BlockQuoteAndCite.insert(editor.data);
					return false;
				}
			});
			BlockQuoteAndCite.getValues();
		}, // open
		
		// Load the previous values (if needed)
		getValues : function(){
			
			var node = editor.selection.getNode();
			var nodeName = node.nodeName.toLowerCase();
			
			var blockquote;
			
			if (nodeName=="cite" || nodeName=="p") {
				blockquote = editor.dom.getParent(node, 'blockquote');
				if (blockquote) {
					var blockquoteClass = blockquote.className;
					if (blockquoteClass.indexOf("exe-quote-cite")!=-1) {
						// This is a blockquote with cite
						BlockQuoteAndCite.isQuote = true;
					}
				}
				
			} else if (nodeName=="blockquote") {
				if (node.className.indexOf("exe-quote-cite")!=-1) {
					// This is a blockquote with cite
					BlockQuoteAndCite.isQuote = true;
					blockquote = node;
				}	
			}
			
			// This is not a blockquote with cite, so we just quit 
			if (!BlockQuoteAndCite.isQuote) return;
			
			// Save the block to update it onsubmit
			BlockQuoteAndCite.block = blockquote;
			
			// Get the paragraph inside the blockquote tag
			var p = blockquote.getElementsByTagName("P");
			if (p.length>0) {
				p = p[0];
				// Quote
				document.getElementById("blockquote").value = p.innerHTML;
				// Quote language
				if (blockquote.lang) {
					document.getElementById("blockquoteLang").value = blockquote.lang;
				}
			}
			
			// Get the cite tag
			var cite = blockquote.getElementsByTagName("CITE");
			if (cite.length>0) {
				cite = cite[0];
				// Cite
				document.getElementById("author").value = cite.innerHTML;
				// Cite language
				if (cite.lang) {
					document.getElementById("authorLang").value = cite.lang;
				}
			}

			// Disable Include Styles (improves presentation) if needed
			if (blockquote.className.indexOf("styled-qc")==-1) {
				win.find('#styled')[0].checked(false);
			}
			
		}, // getValues
		
		insert : function(data){
			
			// Get the values
			var q = data.blockquote;
			var a = data.author;
			
			// The quote and the author are required
			if (q=="") {
				editor.windowManager.alert(_('Please write a quote'));
				return false;
			}
			
			// Get the rest of the values
			var qL = data.blockquoteLang;
			var aL = data.authorLang;
			var styled = data.styled;
			
			// Get the HTML code
			var cssClass = "exe-quote-cite";
			if (styled) cssClass += " styled-qc";
			var h = '<blockquote class="'+cssClass+'"';
			if (qL != "") h += ' lang="' + qL + '"';
			h += '><p>' + q + '</p>';
			if (a != "") {
				h = h + '<cite';
				if (aL != "") h = h + ' lang="' + aL + '"';
				h = h + '>' + a + '</cite>';
			}
			h += '</blockquote>';
			
			// Insert or update
			if (!BlockQuoteAndCite.isQuote) {
				// Insert a new blockquote with cite
				h += "&nbsp;";
				editor.execCommand('mceInsertContent', false, h);
			} else {
				// Update the blockquote with cite (remove the previuos one, then add the new one)
				editor.dom.remove(BlockQuoteAndCite.block);
				editor.execCommand('mceInsertContent', false, h);
			}

			// Close the editor
			editor.windowManager.close();
			
		}, // insert
		
		activateButton : function(node) {
			
			var nodeName = node.nodeName;
			var activate = false;
			var parentBlockQuote = editor.dom.getParent(node, 'blockquote');
			
			if (nodeName=="BLOCKQUOTE" && node.className.indexOf("exe-quote-cite")!=-1) activate = true;
			else if ((nodeName=="P" || nodeName=="CITE") && (parentBlockQuote && parentBlockQuote.className.indexOf("exe-quote-cite")!=-1)) activate = true;
			
			return activate;
			
		}		
		
	} // BlockQuoteAndCite
	
	editor.addButton('blockquoteandcite', {
		tooltip: _('Quote With Authorship'),
		image: url + '/img/blockquoteandcite.png',
		onclick: function() {
			BlockQuoteAndCite.open();
		},
		onPostRender: function() {
			var ctrl = this;
			editor.on('NodeChange', function(e) {
				ctrl.active(BlockQuoteAndCite.activateButton(e.element));
			});
		}		
	});
	
	editor.addMenuItem('blockquoteandcite', {
		text: _('Quote With Authorship'),
		image: url + '/img/blockquoteandcite.png',
		context: 'insert',
		onclick: function() {
			BlockQuoteAndCite.open();
		}
	});
	
	editor.on('init', function(e) {
		editor.dom.loadCSS(url + "/css/content.css");
	});	
	
});